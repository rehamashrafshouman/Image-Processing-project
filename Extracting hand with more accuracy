import cv2
import numpy 


#####################################################################################
# Constants for finding range of skin color in YCrCb
min_YCrCb = numpy.array([0,133,77],numpy.uint8)
max_YCrCb = numpy.array([255,173,127],numpy.uint8)

# Create a window to display the camera feed
cv2.namedWindow('Camera Output')

# Get pointer to video frames from primary device
videoFrame = cv2.VideoCapture(0)

# Process the video frames
keyPressed = -1 # -1 indicates no key pressed

while(keyPressed < 0): # any key pressed has a value >= 0

    # Grab video frame, decode it and return next video frame
    readSucsess, sourceImage = videoFrame.read()
    
    #detect face
    face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
    gray = cv2.cvtColor(sourceImage, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)
    for (x,y,w,h) in faces:
        sourceImage = cv2.rectangle(sourceImage,(x,y),(x+w+30,y+h+50),(0,0,0),-1)
        roi_gray = sourceImage[y:y+h, x:x+w]
        roi_color = sourceImage[y:y+h, x:x+w]
        cv2.imshow(' Output',roi_color)
        
    # Convert image to YCrCb
    imageYCrCb = cv2.cvtColor(sourceImage,cv2.COLOR_BGR2YCR_CB)

    # Find region with skin tone in YCrCb image
    skinRegion = cv2.inRange(imageYCrCb,min_YCrCb,max_YCrCb)
    
    # Do contour detection on skin region and choosing the one with max area
    contours, hierarchy = cv2.findContours(skinRegion, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    contour_info=[]
    for c in contours:
        contour_info.append((
            c,
            cv2.contourArea(c),
        ))
    contour_info = sorted(contour_info, key=lambda contour_info:contour_info[1], reverse=True)
    max_contour = contour_info[0]


    x,y,w,h = cv2.boundingRect(max_contour[0])
    cv2.rectangle(sourceImage, (x, y), (x + w, y + h), (0, 255,0), 2)
    new_img=sourceImage[y:y+h+20,x:x+w+20]
    cv2.imwrite(str(0) + '.png', new_img)
            
    # Display the source image
    cv2.imshow('Camera Output',sourceImage)

    # Check for user input to close program
    keyPressed = cv2.waitKey(1) # wait 1 milisecond in each iteration of while loop

# Close window and camera after exiting the while loop
cv2.destroyWindow('Camera Output')
videoFrame.release()

